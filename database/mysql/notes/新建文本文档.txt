




-- DLR_CODE有索引
EXPLAIN 
SELECT T.DLR_CODE FROM 
t_sac_clue_info_dlr T
LEFT JOIN t_orc_ve_bu_sale_order_to_c O on T.CUST_ID = O.BUY_CUST_ID

-- DLR_CODE有索引

mysql> EXPLAIN 
SELECT T.DLR_CODE FROM 
t_sac_clue_info_dlr T
LEFT JOIN t_orc_ve_bu_sale_order_to_c O on T.CUST_ID = O.BUY_CUST_ID;
+----+-------------+-----------------------------+------------+------+------------------+------------------+---------+------+------+----------+--------------------------+
| id | select_type | table                       | partitions | type | possible_keys    | key              | key_len | ref  | rows | filtered | Extra                    |
+----+-------------+-----------------------------+------------+------+------------------+------------------+---------+------+------+----------+--------------------------+
|  1 | SIMPLE      | t_sac_clue_info_dlr         | NULL       | ALL  | NULL             | NULL             | NULL    | NULL |  174 |   100.00 | NULL                     |
|  1 | SIMPLE      | t_orc_ve_bu_sale_order_to_c | NULL       | ref  | IDX1_BUY_CUST_ID | IDX1_BUY_CUST_ID | 146     | func |    2 |   100.00 | Using where; Using index |
+----+-------------+-----------------------------+------------+------+------------------+------------------+---------+------+------+----------+--------------------------+
2 rows in set (0.09 sec)


mysql> EXPLAIN 
SELECT T.DLR_CODE FROM 
t_orc_ve_bu_sale_order_to_c O
LEFT JOIN t_sac_clue_info_dlr T on T.CUST_ID = O.BUY_CUST_ID;
+----+-------------+-----------------------------+------------+-------+---------------+------------------+---------+------+------+----------+-------------------------------------------------+
| id | select_type | table                       | partitions | type  | possible_keys | key              | key_len | ref  | rows | filtered | Extra                                           |
+----+-------------+-----------------------------+------------+-------+---------------+------------------+---------+------+------+----------+-------------------------------------------------+
|  1 | SIMPLE      | t_orc_ve_bu_sale_order_to_c | NULL       | index | NULL          | IDX1_BUY_CUST_ID | 146     | NULL |    2 |   100.00 | Using index                                     |
|  1 | SIMPLE      | t_sac_clue_info_dlr         | NULL       | ALL   | INDEX_CUST_ID | NULL             | NULL    | NULL |  174 |   100.00 | Range checked for each record (index map: 0x10) |
+----+-------------+-----------------------------+------------+-------+---------------+------------------+---------+------+------+----------+-------------------------------------------------+
2 rows in set (0.06 sec)




todo
https://blog.csdn.net/hzr0523/article/details/118928185



查询视图会出现func


索引下推



https://blog.csdn.net/shw12357/article/details/108639636?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-108639636-blog-91999015.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-108639636-blog-91999015.pc_relevant_paycolumn_v3&utm_relevant_index=1











Optimizing Subqueries, Derived Tables, and View References with Semijoin Transformations


A semijoin is a preparation-time transformation that enables multiple
execution strategies such as table pullout, duplicate weedout, first match,
loose scan, and materialization. The optimizer uses semijoin strategies to
improve subquery execution, as described in this section.

semijoin是预编译时期的转换，可以使用多种执行策略，例如
table pullout, duplicate weedout, first match, loose scan, and materialization
优化器使用semijoin策略来提升子查询的执行性能
















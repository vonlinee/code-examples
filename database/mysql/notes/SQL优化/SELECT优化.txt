
https://dev.mysql.com/doc/refman/5.7/en/select-optimization.html


CREATE TABLE...AS SELECT
https://dev.mysql.com/doc/refman/5.7/en/create-table-select.html

INSERT INTO...SELECT
https://dev.mysql.com/doc/refman/5.7/en/insert-select.html

WHERE clauses in DELETE statements
https://dev.mysql.com/doc/refman/5.7/en/delete.html

这些语句有额外的性能考虑，因为它们将写操作与面向读的查询操作结合起来

join pushdown optimization
https://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-options-variables.html#ndb_join_pushdown-conditions


优化思路如下
1.考虑是否能加索引
2.尽量独立查询的各个部分，比如函数调用
根据查询的结构，可以对结果集中的每一行调用一次函数，或者对表中的每一行调用一次函数
3.减小全表扫描行数
https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_full_table_scan
4.定期使用ANALYZE table语句，使表统计信息保持最新，这样优化器就拥有了构建高效执行计划所需的信息
5.了解特定于每个表的存储引擎的调整技术、索引技术和配置参数
InnoDB和MyISAM都有一套在查询中启用和保持高性能的方法
https://dev.mysql.com/doc/refman/5.7/en/optimizing-innodb-queries.html
https://dev.mysql.com/doc/refman/5.7/en/optimizing-queries-myisam.html
6.InnoDB事务查询优化
Section 8.5.3, “Optimizing InnoDB Read-Only Transactions”.
https://dev.mysql.com/doc/refman/5.7/en/innodb-performance-ro-txn.html
7.避免以难以理解的方式转换查询，尤其是当优化器自动执行某些相同的转换时
8.处理lock问题，查询变慢可能是由于多个session在争抢同一个锁



Optimizing Queries with EXPLAIN
https://dev.mysql.com/doc/refman/5.7/en/using-explain.html


一：WHERE Clause Optimization
https://dev.mysql.com/doc/refman/5.7/en/where-optimization.html

对于单个MyISAM或者MEMORY表，不带WHERE的count(*)查询是直接从表信息中返回结果
或者count(expression)，其中expression需要NOT NULL，注意：只针对单表且不带WHERE

mysql> SELECT * FROM t ;
+----+-------+
| id | col_a |
+----+-------+
|  4 | NULL  |
|  5 | NULL  |
|  6 | NULL  |
|  1 | A     |
|  3 | C     |
|  2 | NULL  |
+----+-------+
6 rows in set (0.00 sec)

mysql> SELECT count(*), count(1), count(t.col_a), count(NULL) FROM t;
+----------+----------+----------------+-------------+
| count(*) | count(1) | count(t.col_a) | count(NULL) |
+----------+----------+----------------+-------------+
|        6 |        6 |              3 |           0 |
+----------+----------+----------------+-------------+
1 row in set (0.00 sec)


如果不使用GROUP BY或聚合函数，HAVING将与WHERE合并
在查询中，首先读取所有常量表，然后读取任何其他表

常量表constant table的定义如下：
1.空表或者只有一行的表
2.


MySQL针对Where子句的优化
1.当没加GROUP BY或者聚合函数时，Having会和Where合并



10.通过尝试所有的可能性来找到连接表的最佳连接组合。如果ORDER BY和GROUP BY子句中的所有列都来自同一个表，则在联接时首选该表

mysql> EXPLAIN
SELECT * FROM customer A
		LEFT JOIN address B ON A.address_id = B.address_id
GROUP BY B.phone
ORDER BY B.phone, B.location;
+----+-------------+-------+------------+--------+---------------+---------+---------+---------------------------------+------+----------+---------------------------------+
| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref                             | rows | filtered | Extra                           |
+----+-------------+-------+------------+--------+---------------+---------+---------+---------------------------------+------+----------+---------------------------------+
|  1 | SIMPLE      | A     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL                            |  599 |   100.00 | Using temporary; Using filesort |
|  1 | SIMPLE      | B     | NULL       | eq_ref | PRIMARY       | PRIMARY | 2       | mysql_optimization.A.address_id |    1 |   100.00 | NULL                            |
+----+-------------+-------+------------+--------+---------------+---------+---------+---------------------------------+------+----------+---------------------------------+
2 rows in set (0.06 sec)

11.如果存在ORDER BY子句和其他GROUP BY子句，或者如果ORDER BY或GROUP BY包含联接队列中第一个表以外的表中的列，则会创建一个临时表
如第10点中sql出现Using temporary

12.如果使用SQL_SMALL_RESULT修饰符，MySQL将使用内存中的临时表


13.每个表的索引会被查询，除非MySQL优化器认为表扫描更有效率，否则MySQL会从查询的索引中选择一个最佳的索引来使用
曾经，表扫描是基于最佳索引是否跨越了表的30%以上而使用的(使用索引的数据占表总数据的比例比较大时，此时认为全表扫描比较适合)，
但固定的百分比不再决定使用索引还是扫描的选择。优化器现在更加复杂，它的估计基于其他因素，如表大小、行数和I/O Block大小

14.在某些情况下，MySQL甚至可以在不查阅数据文件的情况下从索引中读取行。如果索引中使用的所有列都是数字，则只有索引树用于解析查询

15.在输出每一行之前，将跳过与HAVING子句不匹配的行




Cause: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Lock wait timeout exceeded; try restarting transaction



二：范围优化

https://dev.mysql.com/doc/refman/5.7/en/range-optimization.html


范围条件查询
1.对于BTree和Hash索引，使用常量值通过=, <=>, IN(), IS NULL, or IS NOT NULL等操作符于索引部分比较是范围条件
2.对于>, <, >=, <=, BETWEEN, !=, <>等操作符，如果是BTree索引，常量值比较时也是范围条件
3.所有索引类型，多个范围条件用OR或AND连接，仍然是范围条件


常量值的定义
1.常量字符串
2.来自同一联接的常量表(const table)或系统表(system table)的列
3.不相关的子查询

比如










https://dev.mysql.com/doc/refman/5.7/en/range-optimization.html


https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_range


range只EXPLAIN中type字段的range
range访问类型使用单个索引来检索包含在一个或多个索引值间隔内的表中所有行的一个子集
可用于单索引查询和多列索引查询

range出现的条件


mysql> EXPLAIN SELECT * FROM t WHERE t.id > 1;
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | t     | NULL       | range | PRIMARY       | PRIMARY | 4       | NULL |    2 |   100.00 | Using where |
+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0.02 sec)


一：Single-Part Indexes

并不是说EXPLAIN会出现range，只是表示范围条件

1.对于BTREE和HASH索引，用=, <=>, IN(), IS NULL或者IS NOT NULL比较时是范围条件

ALTER TABLE t ADD INDEX idx_col_a(col_a);

mysql> EXPLAIN SELECT * FROM t WHERE t.col_a IS NULL;
+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+--------------------------+
| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra                    |
+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+--------------------------+
|  1 | SIMPLE      | t     | NULL       | ref  | idx_col_a     | idx_col_a | 303     | const |    3 |   100.00 | Using where; Using index |
+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+--------------------------+
1 row in set, 1 warning (0.00 sec)

2.此外，对于BTREE索引，当使用>，<，>=，<=，BETWEEN，！=进行比较时，key与常量值的比较是一个范围条件，或者<>运算符，或者如果LIKE的参数是一个不以通配符开头的常量字符串，则进行LIKE比较

3.对于所有索引类型，多个范围条件用OR或者AND连接，形成一个范围条件
SELECT * FROM t WHERE t.id < 3 OR t.id > 5


Constant value的含义
1.查询字符串中的常量
2.A column of a const or system table from the same join
	t7表中只有一行
	EXPLAIN SELECT * FROM t LEFT JOIN t7 ON t.id = t7.id
3.非相关子查询的结果
-- t7表只有一行，(SELECT id FROM t7 LIMIT 1)表达式也是常量
EXPLAIN SELECT * FROM t 
WHERE t.id = (SELECT id FROM t7 LIMIT 1)


SELECT * FROM t1 WHERE key_col > 1 AND key_col < 10;

SELECT * FROM t1 WHERE key_col = 1 OR key_col IN (15,18,20);

SELECT * FROM t1 WHERE key_col LIKE 'ab%' OR key_col BETWEEN 'bar' AND 'foo';


the optimizer constant propagation phase

MySQL尝试从WHERE子句中为每个可能的索引提取范围条件。在提取过程中，
删除不能用于构造范围条件的条件，合并产生重叠范围的条件，并删除产生空范围的条件。

以下面的sql为例，其中key1是索引列，nonkey不是索引列
SELECT * FROM t1 WHERE
  (key1 < 'abc' AND (key1 LIKE 'abcde%' OR key1 LIKE '%b')) OR
  (key1 < 'bar' AND nonkey = 4) OR
  (key1 < 'uux' AND key1 > 'z');

提取过程如下：
1.首先是整个WHERE条件，整体的范围
(key1 < 'abc' AND (key1 LIKE 'abcde%' OR key1 LIKE '%b')) OR
(key1 < 'bar' AND nonkey = 4) OR
(key1 < 'uux' AND key1 > 'z')

2.移除nonkey = 4和key1 LIKE '%b'这两个条件，因为这两个条件不能使用range扫描
正确移除这两个条件的方式是将他们代替为TRUE，这样我们在进行范围扫描时就不会遗漏任何匹配的行
(key1 < 'abc' AND (key1 LIKE 'abcde%' OR TRUE)) OR
(key1 < 'bar' AND TRUE) OR
(key1 < 'uux' AND key1 > 'z')

3.从第二步中去除总是TRUE/FALSE的条件
(key1 LIKE 'abcde%' OR TRUE) 和 (key1 < 'uux' AND key1 > 'z')
将他们代替为TRUE/FALSE后结果如下
(key1 < 'abc' AND TRUE) OR (key1 < 'bar' AND TRUE) OR (FALSE)

然后去除多余的常量条件 TRUE/FALSE
(key1 < 'abc') OR (key1 < 'bar')

4.将重叠的条件分为合并为一个，得到用于范围扫描的最终条件：
(key1 < 'bar')


一般来说，用于范围扫描的条件比WHERE子句的限制性小，MySQL会执行额外的检查，以筛选出满足范围条件但不满足原始的整个WHERE子句的行


范围条件提取算法可以处理任意深度的嵌套和/或构造，其输出不依赖于WHERE子句中条件的出现顺序。











